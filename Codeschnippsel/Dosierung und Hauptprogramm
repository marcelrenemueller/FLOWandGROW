//Gassensor (I2C)
#include <Adafruit_CCS811.h>
Adafruit_CCS811 ccs;
//Feuchte und Temp.sensor (I2C)
#include <ClosedCube_HDC1080.h>
ClosedCube_HDC1080 hdc1080;

//1-Leiter-Bussystem (Wassertemp. / DHT11)
#include <OneWire.h>

//DHT11 
#include <DHT.h>
#include <DallasTemperature.h>

//Vereinfachung des Zugriffes auf Schnittstellen
#include <SPI.h>
#include <Wire.h>

//Visualisierung
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//Standardlib
#include <stdio.h>
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//DHT11 Temperatur und Feuchtesensor
#define DHTPIN 4          // Hier die Pin Nummer eintragen wo der Sensor angeschlossen ist
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//Deklerationen von PH-Messung
#define SensorPin A2          //pH meter Analog output to Arduino Analog Input 2
#define Offset 0.75          //Abweichung wird hier kompensiert
//#define samplingInterval 20
#define ArrayLenth  10        //Sammlung der PH-Werte --> umso weniger Werte umso ungenauer --> umso weniger Wert umso schneller steigt der Wert (INIT mit Anzahl: 40)
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//Deklerationen der Pumpen und Licht
//Hauptpumpe NFT und Licht
#define pumpNFT 8
bool pumpNFTstatus = false;
//Dosierungspumpe EC und PH
//Dosierpumpe EC
#define pumpEC 10
//Dosierpumpe PH
#define pumpPH 11
//NFT-Licht
#define lightNFT 12
//Anzucht
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
/*Auskommentiert das Digitale Eingänge nicht ausreichen
//Alarm, Wartung und RUN
#define run_LED 11
#define maintenance_LED 12
#define alarm_LED 13
*/ //Auskommentiert das Digitale Eingänge nicht ausreichen
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//Display Parameter
#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
//Variablen Bildschirmnavigation
#define navigationButton 2
boolean pressedButton = false;          
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//Terminal Fühler - Wassertemperatur
#define ONE_WIRE_BUS 7                //Datapin vom Temp.Sensor
OneWire oneWire(ONE_WIRE_BUS);        //Buskommunikation Sensor
DallasTemperature sensors(&oneWire);
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//Variablen für die EC-Messung
int R1= 1000;                   //Wert des Widerstandes für die EC-Messung über den Stecker
int EC_Read = A0;               //AI: Analoger Wert der über den Spannungsteiler ausgelesen wird
int ECPower = A1;               //AO: 5V Spannung die ausgegeben wird über den Stecker
float Temp_C;                   //Temp in Celcius
float Temp_F;                   //Temp in Fahrenheit
float Temp1_Value = 0;          //Speicherwert für die Vergleichsmessung
float Temp_Coef = 0.019;        //Temperatur Koeffizient
//float constanttemp = 18.800;  //Zum Kalibrieren --> NORMAL auskommentieren
float offset=-0.6;              //Temperaturoffset --> abgeglichen mit EC/PPM/PH-Messgerät
//-------------------------------------------------------------------------------------------------------------------------------------
//Relevant NUR für Kalibrierung (ACHTUNG!)
float Calibration_PPM = 497 ;                   //gemessener Wert mit anderem Messgerät
float K= 3.6;                                   //Vor der Kalibrierung: 2.4 --> Vergleichswert bei der Kalbrierung muss geändert werden
float PPM_Con=0.5;                              //TDS Factor --> im Datenblatt des Messgerätes enthalten
float CalibrationEC= (Calibration_PPM*2)/1000;  //Vergleich für die EC-Messung
//-------------------------------------------------------------------------------------------------------------------------------------
//Variablen für die EC-Messung
float Temperature;  //gemessene Temperatur über Terminalfühler
float EC;           //Errechneter EC-Wert
float EC_at_25;     //EC-Wert bei 25 Grad
int ppm;            //Errechneter Wert der Anzahl der Teilchen der Lösung in PartsPerMillion
float A_to_D= 0;    //was Ist das genau
float Vin= 5;       //angegebener Wert der Spannung für die Messung
float Vdrop= 0;     //Angabe für Rechteckssignal
float R_Water;      //Widerstand des Wassers
float Value=0;      //Speicherung des Zwischenwerts
//-------------------------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------------------------
//Setupinitialisierung
void setup() { 
//Beginn der Seriellen Schnittstelle
Serial.begin (9600); 
//-------------------------------------------------------------------------------------------------------------------------------------
//Umgebungstemperatur Sensor DHT11 Start
dht.begin();
//-------------------------------------------------------------------------------------------------------------------------------------
//Temperatursensor EC-Lösung Start
sensors.begin();
//Werte des Terminalfühlers ausgeben
sensors.requestTemperatures();
//-------------------------------------------------------------------------------------------------------------------------------------
//Temperatur und Feuchte des Kombifühlers Start
hdc1080.begin(0x40);
//-------------------------------------------------------------------------------------------------------------------------------------
//Gassensor Start
ccs.begin();
//ACHTUNG auskommentiert weil er sonst nicht hochfährt
//So wars davor Display hat gestoppt wenn Sensor nicht verfügbar war
/*
if(!ccs.begin()){
Serial.println("Failed to start sensor! Please check your wiring.");
while(1);
}
//Auf Sensor warten
while(!ccs.available());
*/
//-------------------------------------------------------------------------------------------------------------------------------------
//Beginn der seriellen Schnittstelle
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); 
display.display();
delay(2000);
//Trennung zu Anfangsdisplay
display.clearDisplay(); 
display.setTextSize(1);
display.setCursor(0, 0);
display.setTextColor(WHITE);
delay(5000);
display.clearDisplay();
//-------------------------------------------------------------------------------------------------------------------------------------
//Festlegung PINS (Arduino-MEGA)
/*Auskommentiert das Digitale Eingänge nicht ausreichen
//RUN LED
pinMode(run_LED,OUTPUT);
//Wartung LED
pinMode(maintenance_LED,OUTPUT);
//Alarm LED
pinMode(alarm_LED,OUTPUT);
Auskommentiert das Digitale Eingänge nicht ausreichen*/

//Achtung nur zum Test --> Beispiel um Leckage zu Simulieren
//pinMode(test,INPUT_PULLUP);
//Taster Bildschirmnavigation
pinMode(navigationButton, INPUT_PULLUP);
attachInterrupt(digitalPinToInterrupt(navigationButton), OLED_NAV, RISING);
//-------------------------------------------------------------------------------------------------------------------------------------
//EC-Messung
pinMode(EC_Read,INPUT);
pinMode(ECPower,OUTPUT);
//-------------------------------------------------------------------------------------------------------------------------------------
//Zuweisung Pumpen
//Hauptpumpe  NFT
pinMode(pumpNFT,OUTPUT);
digitalWrite(pumpNFT, HIGH); // Pumpen Relay auf HIGH damit es offen ist
//EC-Pumpe
pinMode(pumpEC,OUTPUT);
digitalWrite(pumpEC, HIGH);
//PH-Pumpe
pinMode(pumpPH,OUTPUT);
digitalWrite(pumpPH, HIGH);
//NFT-Licht
pinMode(lightNFT,OUTPUT);
digitalWrite(lightNFT,HIGH);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//EC-Messung Kalibrierung (ACHTUNG!)
//Zu Beginn des Systems Kalbrieren
//Calibrate (0,0);  //Muss nach der Kalibrierung auskommentiert sein !!!
                  //Temperature_end, Temperature_begin, Temp_C
//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Timer für die Dosierung
 // Configurar Timer1
  TCCR1A = 0;                        //Registro control A a 0, pines OC1A y OC1B deshabilitados
  TCCR1B = 0;                        //Limpia el registrador
  TCCR1B |= (1<<CS10)|(1 << CS12);   //Configura prescaler a 1024: CS12 = 1 y CS10 = 1
  TCNT1 = 0xC2F8;                    //Iniciar timer para desbordamiento a 1 segundo
                                     //65536-(16MHz/1024/1Hz - 1) = 49912 = 0xC2F8 en hexadecimal
   
  TIMSK1 |= (1 << TOIE1);           //Habilitar interrupción para Timer1


}


//----------------------------------------------------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Funktionen
//Kalibrierung des EC Wertes (Berechnung Temp und Widerstandsmessung)
//nur während der Kablibrierung im Setup-Menü aufgerufen
void Calibrate (float Temperature_end, float Temperature_begin) // bis jetzt: float Temperature_end, float Temperature_begin, float temp_C
{
Serial.println("Kalibrierung hat begonnen!");
Serial.println("Hinweis: Wurde der TDS-Wert des Messgeraetes angepasst?");
Serial.println("Bitte warten. Den Stecker und Temperaturfuehler dauerhaft bedeckt halten mit der Kalibrierfluessigkeit!");
//float Temperature_end=0; //hab ich
//float Temperature_begin=0;  //hab ich
//double Temp; //hab ich
//Einsatz des Terminalfühlers
Temp_C = (sensors.getTempCByIndex(0) + offset); //Temperaturberechnung 
Temp1_Value = Temp_C;
Temperature_begin=Temp_C;

//Kontrolle der Temperatur
Serial.print("Vergleichswert Temperatur 1 (in Grad Celcius): ");
Serial.println(Temp_C);

//Vergleich der Elektrodenspannung (Spannungsteiler)
Value = 0;
int i = 1;
while(i<=10){
digitalWrite(ECPower,HIGH);
A_to_D = analogRead(EC_Read);
A_to_D = analogRead(EC_Read);
digitalWrite(ECPower,LOW);
Value = Value + A_to_D;
i++;
delay(6000);
};
A_to_D=(Value/10);
Temp_C = (sensors.getTempCByIndex(0) + offset); //Temperaturberechnung 
Temp1_Value = Temp_C;
Temperature_end=Temp_C;

//Kontrolle der Temperatur
Serial.print("Vergleichswerte Temperatur 2 (in Grad Celcius): ");
Serial.println(Temp_C);

//Berechnung des Ausgleichsfaktors
EC =CalibrationEC*(1+(Temp_Coef*(Temperature_end-25.0)));
Vdrop= (((Vin)*(A_to_D))/1024.0);
R_Water=(Vdrop*R1)/(Vin-Vdrop);                             //Widerstand vom Wasser
float K_cal= 1000/(R_Water*EC);                             //K-Faktor

//Ausgabe des Ausgleichsfaktors
Serial.print("Ersetze den Ausgleichsfaktor in der Konfigline / K = ");
Serial.println(K_cal);
Serial.print("Temperaturdifferenz zwischen 2 Messungen = ");

//Differenz Berechnung beider gemessener Temperaturen mit einem Versatz von 6 Sekunden
float Temp_Diff=Temperature_end-Temperature_begin;

//Ausgabe der Temperaturdifferenz beider Messungen
Serial.print(Temp_Diff);
Serial.println(" (in Grad Celcius)");
Serial.println("Temperaturdifferenz darf maximal 0.15 abweichen. Wegen der Genauigkeit der Messung");
Serial.println("");
Calibrate ((float )Temperature_end, (float) Temperature_begin);
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------

//EC Wert über Widerstandsmessung A0 und A1
void GetEC()
{
Temp_C = sensors.getTempCByIndex(0)+offset;//Temperaturausgleich --> Hier Konstante wenn Kalbrierung oder Anpassung des EC-Wertes (K-Faktor)
Temperature = Temp_C;
digitalWrite(ECPower,HIGH);
A_to_D= analogRead(EC_Read);
A_to_D= analogRead(EC_Read);
digitalWrite(ECPower,LOW);
Vdrop= (Vin*A_to_D) / 1024.0;
R_Water = (Vdrop*R1) / (Vin-Vdrop);
EC = 1000/ (R_Water*K);
EC_at_25 = EC / (1+ Temp_Coef*(Temperature-25.0)); // muss angepasst werden auf die jeweilige Umgebungstemperatur war davor auf 25 grad
ppm=(EC_at_25)*(PPM_Con*1000);
//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Testfunktion über serielle Schnittstelle
//Für Ausgabe auf dem Seriellen Monitor (Test wenn kein Display) --> normal auskommentiert
//Serial.print(" EC: ");
//Serial.print(EC_at_25);
//Serial.print(" milliSiemens(mS/cm) ");
//Serial.print(ppm);
//Serial.print(" ppm ");
//Serial.print(Temperature);
//Serial.println(" *C ");
//----------------------------------------------------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//PH-Messung
//Variablen
int pHArray[ArrayLenth];   //Store the average value of the sensor feedback
int pHArrayIndex=0;
static float pHValue,voltage;

void GetPH(){
      pHArray[pHArrayIndex++]=analogRead(SensorPin);
      if(pHArrayIndex==ArrayLenth)pHArrayIndex=0;
      voltage = avergearrayPH(pHArray, ArrayLenth)*5.0/1024;
      pHValue = 3.5*voltage+Offset;
      //Test wenn kein Display 
      //Serial.print("Voltage:");
      //Serial.print(voltage,2);
      //Serial.print("    pH value: ");
      //Serial.println(pHValue,2);
      double avergearrayPH();
}

double avergearrayPH(int* arr, int number){
  int i;
  int max,min;
  double avgPH;
  long amount=0;
  if(number<=0){
    Serial.println("Error number for the array to avraging!/n");
    return 0;
  }
  if(number<5){   //less than 5, calculated directly statistics
    for(i=0;i<number;i++){
      amount+=arr[i];
    }
    avgPH = amount/number;
    return avgPH;
  }else{
    if(arr[0]<arr[1]){
      min = arr[0];max=arr[1];
    }
    else{
      min=arr[1];max=arr[0];
    }
    for(i=2;i<number;i++){
      if(arr[i]<min){
        amount+=min;        //arr<min
        min=arr[i];
      }else {
        if(arr[i]>max){
          amount+=max;    //arr>max
          max=arr[i];
        }else{
          amount+=arr[i]; //min<=arr<=max
        }
      }//if
    }//for
    avgPH = (double)amount/(number-2);
  }//if
  return avgPH;
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Raumtemperatur und -feuchte DHT11
//Variablen für die Funktion
float tempRoom1, humidityRoom1;

void Temp_Hum_Room1(){
  tempRoom1= dht.readTemperature();
  humidityRoom1 = dht.readHumidity();
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Luftqualitätsmessung 
//Variablen
float CO2;
float TVOC;
float tempRoom2;
float humidityRoom2;
//Funktion
void airQuality(){
ccs.available();
ccs.readData();
CO2  = ccs.geteCO2();
TVOC =ccs.getTVOC();
tempRoom2 = hdc1080.readTemperature();
humidityRoom2 =hdc1080.readHumidity();
//Test der WErte
/*
Serial.println("Temp: ");
Serial.println(tempRoom2);
Serial.println("Hum: ");
Serial.println(humidityRoom2);
Serial.println("CO2: ");
Serial.println(CO2);
Serial.println("TVOC: ");
Serial.println(TVOC);
*/
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Visualisierung der verschiedenen Displayseiten
//EC-Messung (Seite 1)
void visualize_site1(float tempEC, float elctricConductivity, float TDS){
display.setCursor(5,0);
display.setTextSize(0);
display.print("Temp.: ");  
display.print(tempEC,2);
display.print(" ");
display.print((char)247); //Grad Symbol
display.println("C");
//EC-Wert
display.setCursor(5,8);
display.setTextSize(0);
display.print("EC: ");  
display.print(elctricConductivity,3); //davor: EC_at_25,3);
display.println(" ms/cm");
//PPM-Wert
display.setCursor(5,16);
display.setTextSize(0);  
display.print("TDS: ");
display.print(TDS,0);
display.print(" ppm");
//Visualisierung
display.display();
display.clearDisplay();
}


//Visualisierung Umgebungstemperatur (Seite 2)
bool errorDHT=false;
void visualize_site2(float tempRoom, float humidityRoom){
if (isnan(tempRoom) || isnan(humidityRoom)) {
     //Umgebungstemperatur
    display.setCursor(5,0);
    display.setTextSize(0);  
    display.println("Raumtemperatur: ");
    display.print("ERROR");
    display.print(" ");
    display.print((char)247); //Grad Symbol
    display.println("C");
    //Feuchtigkeit
    display.setCursor(5,15);
    display.setTextSize(0);  
    display.println("Raumfeuchte: ");
    display.print("ERROR");
    display.print(" ");
    display.println((char)37); //Prozent Symbol
    //Visualisierung
    display.display();
    display.clearDisplay();
    //Fehler bei Auslesen des Sensors
    errorDHT = true;
  } else {
    //Umgebungstemperatur
    display.setCursor(5,0);
    display.setTextSize(0);  
    display.println("Raumtemperatur: ");
    display.print(tempRoom,2);
    display.print(" ");
    display.print((char)247); //Grad Symbol
    display.println("C");
    //Feuchtigkeit
    display.setCursor(5,15);
    display.setTextSize(0);  
    display.println("Raumfeuchte: ");
    display.print(humidityRoom,2);
    display.print(" ");
    display.println((char)37); //Prozent Symbol
    //Visualisierung
    display.display();
    display.clearDisplay();
    //Fehler Auslesen
    errorDHT=false;
  }
  return errorDHT;
}

//Visualisierung I2C Fühler --> CO2, Temp, Feuchte (Seite 3)
void visualize_site3(float valueCO2, float valueTVOC, float tempRoom, float humidityRoom){
//CO2 Gehalt 
display.setCursor(5,0);
display.setTextSize(0);  
display.print("CO2: ");
display.print(valueCO2);
display.print(" ");
display.println("ppm"); //Prozent Symbol
//TVOC Gehalt - gelöste Teile in der Luft
display.setCursor(5,8);
display.setTextSize(0);  
display.print("TVOC : ");  //gelöste Teile in der Luft
display.println(valueTVOC);
//Raumtemperatur
display.setCursor(5,16);
display.setTextSize(0);  
display.print("Raumtemp: ");
display.print(tempRoom,2);
display.print(" ");
display.print((char)247); //Grad Symbol
display.println("C");
//PH-Wert
display.setCursor(5,24);
display.setTextSize(0);  
display.print("Feuchte: ");
display.print(humidityRoom,2);
display.print(" ");
display.println((char)37); //Prozent Symbol
//Visualisierung
display.display();
display.clearDisplay();
}

//Visualisierung PH-Wert

void visualize_site4(float valuePH, float tempPH){
//Wassertemperatur PH
display.setCursor(5,0);
display.setTextSize(0);  
display.println("Temperatur (PH): ");
display.print(tempPH,2);
display.print(" ");
display.print((char)247); //Grad Symbol
display.println("C");
//PH-Wert
display.setCursor(5,15);
display.setTextSize(0);  
display.println("pH-Wert: ");
display.print(valuePH,2);
display.println(" mol/liter ");
//Visualisierung
display.display();
display.clearDisplay();

}

//Uhr Display
//Zeitsteuerung
volatile int zaehler_sek =0;
volatile int zaehler_min = 0 ; 
volatile int zaehler_hour = 4;
volatile int zaehler_day = 5;
void visulize_clock(){
//Tage
display.setCursor(5,0);
display.setTextSize(0);  
display.print("Tage: ");
display.println(zaehler_day);
//Uhrzeit
display.setCursor(5,15);
display.setTextSize(0);  
display.println("Uhrzeit: ");
display.setCursor(5,25);
display.setTextSize(0);  
if(zaehler_hour>=10){
display.print(zaehler_hour);
}
else{
  display.print("0");
  display.print(zaehler_hour);
}
display.print(" : ");
if(zaehler_min>=10){
display.print(zaehler_min);
}
else{
  display.print("0");
  display.print(zaehler_min);
}
display.print(" : ");
if(zaehler_sek>=10){
display.print(zaehler_sek);
}
else{
  display.print("0");
  display.print(zaehler_sek);
}
//Visualisierung
display.display();
display.clearDisplay();
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Testfunktionen (ACHTUNG)
//CO2 und TVOC Funktion
//Normal auskommentiert
/*
void CO2(){
  if(ccs.available()){
    if(!ccs.readData()){
      Serial.print("CO2: ");
      Serial.print(ccs.geteCO2());
      Serial.print("ppm, TVOC: ");
      Serial.println(ccs.getTVOC());
    }
    else{
      Serial.println("ERROR!");
      while(1);
    }
  }
  delay(500);
*/

//--------------------------------------------------------------------------------------------------------------------------------

//Variablen Navigation OLED
volatile int seitenwahl=0;

void OLED_NAV(){
    if(seitenwahl < 4){
    seitenwahl = seitenwahl +1;
    }
    else{
      seitenwahl = 0;
    }
    return seitenwahl;    
}

//Visualisierung der verschiedenen Seiten auf dem OLED
void OLED(){

if (seitenwahl == 0){
  sensors.requestTemperatures();
  visualize_site1(Temp_C,EC_at_25, ppm);   //Übersicht: EC-Messung
  Serial.println(EC_at_25);
}     
if(seitenwahl == 1){
  visualize_site2(tempRoom1,humidityRoom1);                                 //Übersicht Umgebungeigenschaften
} 
if(seitenwahl == 2){
 visualize_site3(CO2,TVOC,tempRoom2,humidityRoom2);                 //Baustelle: PH-Messung
}
if(seitenwahl == 3){
  sensors.requestTemperatures();
  visualize_site4(pHValue,Temp_C);//sensors.getTempCByIndex(0) + offset);                                                                    //Baustelle: PH-Messung
}
if(seitenwahl == 4){
  visulize_clock();                                                                  //Uhrzeit anzeigen
}

}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Meldungen anpassen um bei Fehler zu sperren !! 

/* //Auskommentiert weil zu wenige digtiale GPIOS
//Alarm Meldungen
boolean alarm_status = false;  
void alarm(){
if ( ppm < 1 || Temp_C < 10 || EC_at_25 < 0.05 || pHValue > 10 || pHValue <= 4 ){  //Zusätlich: 1.) CO2 == 0 || TVOC == 0 ||tempRoom2 > 50.00 || humidityRoom2>99.00 (für den I2C-Fühler) //2.) || errorDHT == true (DHT-Sensor)
  alarm_status = true;
}
else{
  alarm_status = false;
}

if (alarm_status == true){
  digitalWrite(alarm_LED,HIGH);
}
else{
  digitalWrite(alarm_LED,LOW);
}
}

//Wartungsmeldungen
boolean maintenance_status = false;
void maintenance(){
  if (pHValue <= 5){  //eingestellte Grenzwert 
  maintenance_status = true;
}
else{
  maintenance_status = false;
}

if (maintenance_status == true){
  digitalWrite(maintenance_LED,HIGH);
}
else{
  digitalWrite(maintenance_LED,LOW);
}
}

//RUN-Meldung
boolean run_status = false;
void run(){
  if (alarm_status == false){
  run_status = true;
}
else{
  run_status = false;
}

if (run_status == true){
  digitalWrite(run_LED,HIGH);
}
else{
  digitalWrite(run_LED,LOW);
}
}
*/ //Auskommentiert weil zu wenige digtiale GPIOS

//--------------------------------------------------------------------------------------------------------------------------------
//Hauptschleife
//Variablen für die Hauptschleife
//NFT-Licht
//Zeitkontrolle
int minTimeLight=5;                  //Mindestzeit in Minuten (10 Minuten EIN / 5 Minuten AUS)
int adjustableTimeLight = 20;         //der Wert den wir bekommen mit der Mindestlaufzeit verschachteln
int LightEinschaltzeit=0;            //adjustableTimeNFT+minTime;
//Flankeauswertung wenn jeweilige Zeit über Modulo verglichen
int countLight = 1;
int stateLight = LOW;
int laststateLight = LOW;

//Das Verhältnis der Einschaltzeit ist 2:1 (Einschaltzeit/Ausschaltzeit)
void lightTimeControlNFT(){
  for (int i=1; i<61;i++){
  if (adjustableTimeLight <= minTimeLight){
    LightEinschaltzeit = minTimeLight;
  } 
  else if (adjustableTimeLight==i){
    LightEinschaltzeit = (adjustableTimeLight)/2; //Verschachtelung mit Mindestszeit
  }
  }
}
//Licht-NFT
void NFTLightOn(){
lightTimeControlNFT();
if (zaehler_min % (LightEinschaltzeit) == 0){
  stateLight = HIGH;
}
else{
  stateLight=LOW;
}
 //Flankenwechsel erkennen
 if(laststateLight == LOW && stateLight == HIGH) {
    //abhängig vom counter passende funktion aufrufen
    switch(countLight) {
     case 1:     digitalWrite(lightNFT,LOW);
                 break;
     case 2:     digitalWrite(lightNFT,LOW);
                 break;
     case 3:     digitalWrite(lightNFT,HIGH);
                 break;            
    }   
    //zähler erhöhen
    countLight++;
    //zähler zurücksetzen
    if(countLight == 4) {
    countLight = 1;
    }
 }
  laststateLight = stateLight;   //letzten zustand merken 
}

//Hauptpumpe NFT
int minTimeNFT=5;                  //Mindestzeit in Minuten (10 Minuten EIN / 5 Minuten AUS)
int adjustableTimeNFT = 20;         //der Wert den wir bekommen mit der Mindestlaufzeit verschachteln
int NFTEinschaltzeit=0;            //adjustableTimeNFT+minTime;
//Flankeauswertung wenn jeweilige Zeit über Modulo verglichen
int countNFT = 1;
int stateNFT = LOW;
int laststateNFT = LOW;

//Das Verhältnis der Einschaltzeit ist 2:1 (Einschaltzeit/Ausschaltzeit)
void pumpTimeControlNFT(){
  for (int i=1; i<61;i++){
  if (adjustableTimeNFT <= minTimeNFT){
    NFTEinschaltzeit = minTimeNFT;
  } 
  else if (adjustableTimeNFT==i){
    NFTEinschaltzeit = (adjustableTimeNFT)/2; //Verschachtelung mit Mindestszeit
  }
  }
}

void NFTPumpOn(){
pumpTimeControlNFT();
if (zaehler_min % (NFTEinschaltzeit) == 0){
  stateNFT = HIGH;
}
else{
  stateNFT=LOW;
}
 //Flankenwechsel erkennen
 if(laststateNFT == LOW && stateNFT == HIGH) {
    //abhängig vom counter passende funktion aufrufen
    switch(countNFT) {
     case 1:     digitalWrite(pumpNFT,LOW);
                  pumpNFTstatus=true;
                 break;
     case 2:     digitalWrite(pumpNFT,LOW);
                  pumpNFTstatus=true;
                 break;
     case 3:     digitalWrite(pumpNFT,HIGH);
                pumpNFTstatus=false;
                 break;            
    }   
    //zähler erhöhen
    countNFT++;
    //zähler zurücksetzen
    if(countNFT == 4) {
    countNFT = 1;
    }
 }
  laststateNFT = stateNFT;   //letzten zustand merken 
}

//Dosierung PH
int waitMinDosagePH=1;                            //Für Display eventuell --> Eingabe der Wartzeit in Minuten
int proportionFixPH = waitMinDosagePH * 30;           //Für die Anzeige auf dem Display --> Berechnung der Proportionalen Zeitsteuerung --> Wartezeit= proportionFix * adjustableTimePH / z.B. 5 Minuten entspricht proportion
                                                  //proportionFixPH = Wartezeit / AdjustableTimePH --> = (60s) / 2 = 30 (ERGEBNIS) --> pro Minute einen Faktor um 30 erhöhen
int proportionPH = proportionFixPH +1;            //Verhältnis der Dosierung zu Warte zeit 1 / Proportion --> BSP.: 1 / 60 --> umso länger ich Dosiere umso länger wartet man !!!!
int minTimePH=2;                                //Mindestzeit in Minuten (10 Minuten EIN / 5 Minuten AUS)
int adjustableTimePH = 2;                       //Darf nicht gleich 1 sein !!! 
int PHEinschaltzeit=0;                          //adjustableTimeNFT+minTime;
//Flankeauswertung wenn jeweilige Zeit über Modulo verglichen
int countPH = 1;
int statePH = LOW;
int laststatePH = LOW;

//Das Verhältnis der Einschaltzeit ist 2:1 (Einschaltzeit/Ausschaltzeit)
void dosingpumpTimePH(){
  for (int i=1; i<61;i++){
  if (adjustableTimePH < minTimePH){
    PHEinschaltzeit = minTimePH;
  } 
  else if (adjustableTimePH==i){
    PHEinschaltzeit = adjustableTimePH; //Verschachtelung mit Mindestszeit Anpassung für Werte 
    }
  
  }
}


//Hilfsmerker Eindosierung
int dosierungsanzahl;

void PHPumpOn(){
dosingpumpTimePH();
if (zaehler_sek % (PHEinschaltzeit) == 0){
  statePH = HIGH;
}
else{
  statePH=LOW;
}
 //Flankenwechsel erkennen
 if(laststatePH == LOW && statePH == HIGH) {
    //abhängig vom counter passende funktion aufrufen
    switch(countPH) {
     case 1:    digitalWrite(pumpPH,LOW);
                Serial.print("Anzahl Dosierung PH: ");
                Serial.println(dosierungsanzahl++);
                Serial.println("PH-Wert: ");
                Serial.println(pHValue);
                break; 
    default:    digitalWrite(pumpPH,HIGH);
                break;

    }   
    //zähler erhöhen
    countPH++;
    //zähler zurücksetzen
    if(countPH == proportionPH) {
    countPH = 1;
    }
 }
  laststatePH = statePH;   //letzten zustand merken 
}

//Sperre der Dosierung (erst PH dann EC-Wert korrigieren)
//Merker um die EC-Dosierung zu blockieren bis der PH-Wert erreicht ist
bool PHDosageOn = false;

//Dosierung EC
int waitMinDosageEC=4;                          //Wartezeit in Minuten zum Nachdosieren (Einstellbar über Display)
int proportionFixEC=waitMinDosageEC * 30;       //Für die Anzeige auf dem Display --> Berechnung der Proportionalen Zeitsteuerung --> Wartezeit= proportionFix * adjustableTimePH
int proportionEC = proportionFixEC +1;          //Verhältnis der Dosierung zu Warte zeit 1 / Proportion --> BSP.: 1 / 60 --> umso länger ich Dosiere umso länger wartet man !!!!
int minTimeEC=2;                                //Mindestzeit in Minuten (10 Minuten EIN / 5 Minuten AUS)
int adjustableTimeEC = 1;                       //der Wert den wir bekommen mit der Mindestlaufzeit verschachteln
int ECEinschaltzeit=0;                          //adjustableTimeNFT+minTime;
//Flankeauswertung wenn jeweilige Zeit über Modulo verglichen
int countEC = 1;
int stateEC = LOW;
int laststateEC = LOW;

//Das Verhältnis der Einschaltzeit ist 2:1 (Einschaltzeit/Ausschaltzeit)
void dosingpumpTimeEC(){
  for (int i=1; i<61;i++){
  if (adjustableTimeEC < minTimeEC){
    ECEinschaltzeit = minTimeEC;
  } 
  else if (adjustableTimeEC==i){
    ECEinschaltzeit = adjustableTimeEC; //Verschachtelung mit Mindestszeit Anpassung für Werte 
    }
  
  }
}

void ECPumpOn(){
dosingpumpTimeEC();
if (zaehler_sek % (ECEinschaltzeit) == 0 && EC_at_25> 0.1){   // 0.1 --> ist der Grenzwert von dem Wasser was eingfüllt wird / es dauert gewisse Zeit bis die erste Messung zustande kommt
  stateEC = HIGH;
}
else{
  stateEC=LOW;
}
 //Flankenwechsel erkennen
 if(laststateEC == LOW && stateEC == HIGH) {
    //abhängig vom counter passende funktion aufrufen
    switch(countEC) {
     case 1:    digitalWrite(pumpEC,LOW);
                break; 
    default:    digitalWrite(pumpEC,HIGH);
                break; 
    //case proportionFixEC:    digitalWrite(pumpEC,HIGH);
     //           break;

    }   
    //zähler erhöhen
    countEC++;
    Serial.println(countEC);
    //zähler zurücksetzen
    if(countEC == proportionEC) {
    countEC = 1;
    }
 }
  laststateEC = stateEC;   //letzten zustand merken 
}



//Zeitsteuerung über MILLIS()
//Event 1 alle 5 Sekunden
const unsigned long eventInterval1 = 5 * 1000UL;            //alle 5 Sekunden soll ein Event durchgeführt werden
unsigned long previousTime1 = 0;                      //Speicherung der vorherigen Zeit1

//Event 2 alle 3 Sekunden
const unsigned long eventInterval2 = 3 * 1000UL;            //alle 3 Sekunden soll ein Event durchgeführt werden
unsigned long previousTime2 = 0;

//Event 3 alle 2 Sekunden
const unsigned long eventInterval3 = 2 * 1000UL;            //alle 2 Sekunden soll ein Event durchgeführt werden
unsigned long previousTime3 = 0; 

//Event 4 
//Pumpensteuerung (Intervallsteuerung Hauptpumpe alle 10 Minuten)
// muss noch angepasst werden Intervalle übergeben nur nicht mit MILLIS()


//Event 5 alle 10 Minuten
//Pumpensteuerung (Intervallsteuerung Hauptpumpe)
const unsigned long eventInterval5 = 2 * 1000UL;           //10 * 60 * 1000;  //alle 10 Minuten soll ein Event durchgeführt werden
unsigned long previousTime5 = 0;

//Event 6 alle 10 Minuten
//Pumpensteuerung (Intervallsteuerung Hauptpumpe)
const unsigned long eventInterval6 = 2 * 1000UL;           //10 * 60 * 1000;  //alle 10 Minuten soll ein Event durchgeführt werden
unsigned long previousTime6 = 0;

//Event 7 alle 1 Minuten
//Verzögerung der Dosierung
const unsigned long eventInterval7 = 1 * 60 * 1000UL;           //10 * 60 * 1000;  //alle 10 Minuten soll ein Event durchgeführt werden
unsigned long previousTime7 = 0;

int initial = 0;                                      //Initialwert für das Laden der Startwerte
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
void loop() {
//--------------------------------------------------------------------------------------------------------------------------------
//Status der Anlage --> auskommentiert weil zu wenige GPIOS
//alarm();
//run();
//maintenance();
//--------------------------------------------------------------------------------------------------------------------------------
//Visualisierung Display
OLED();



//Aktuelle Zeit des Mikrocontrollers
unsigned long currentTime = millis();
//Zyklisches Abfragen der Werte

//Anpassung erst PH-Messung und EC-Messung darf nicht gleichzeitig passieren --> Problem das wert sich gegenseitig verfälschen !!! 
//alle 3 sekunden wenn die eine messung nicht an ist 

//Anpassung bei Overflow muss noch geändert werden (ACHTUNG!!)
if ((currentTime - previousTime1 >= eventInterval1) || (currentTime == 0)) {                  //alle 5 Sekunden
  GetEC();                                                                                    //Aufruf und Abarbeitung für den EC-Wert                                  
  previousTime1 = currentTime;                                                                 //Initalisierung der Anfangswert
  }
if ((currentTime - previousTime2 >= eventInterval2) || (currentTime == 0)) {                  //alle 3 Sekunden
  GetPH();
  previousTime2 = currentTime;                                                                 //Initalisierung der Anfangswert
  }
if ((currentTime - previousTime3 >= eventInterval3) || (currentTime == 0)) {                    //alle 2 Sekunden
  Temp_Hum_Room1();                                                                            //Aufruf und Abarbeitung für Raumtemperatur/-feuchte 1   
  airQuality();                                                                                //Aufruf Luftqualität und Raumtemperatur/-Feuhte 2
  previousTime3 = currentTime;                                                                //Initalisierung der Anfangswert
  }


//NEU: Zeitsteuerung und Ansteurung Hauptpumpe
NFTPumpOn();
//NEU: Lichtansteuerung
NFTLightOn();

//Dosierungen
//NEU: Zeitsteuerung und Ansteuerung PH-Dosierpumpe
//Dosierung der PH-Down-Lösung wird solange blockiert bis der gewünschte EC-Wert erreicht ist 
if(pHValue>6.0 == true && pumpNFTstatus == true ){                                              //Grenzwertvergeben + Dosierung nur möglich wenn Zirkulationspumpe EIN
PHPumpOn();
PHDosageOn = true;
digitalWrite(pumpEC,HIGH);          //Ausschalten der Pumpe wenn PH-Wert für die Nährstoffdosierung angepasst wird
}
else{
  PHDosageOn = false;
}
////NEU: Zeitsteuerung und Ansteuerung EC-Dosierpumpe
if(EC_at_25<0.320 == true && pumpNFTstatus == true && PHDosageOn ==false){    
ECPumpOn();
}



//--------------------------------------------------------------------------------------------------------------------------------
return 0;
} 


//Timer für Dosierung
ISR(TIMER1_OVF_vect)                              //Interrupción del TIMER1 
{
  TCNT1 = 0xC2F7;                                 // Reniciar Timer1
  zaehler_sek=zaehler_sek + 1;
  if (zaehler_sek==60){
    zaehler_sek = 0;
    zaehler_min =zaehler_min + 1;
  }
  if (zaehler_min == 60){
    zaehler_min = 0;
    zaehler_hour= zaehler_hour+1;
  }
  if (zaehler_hour == 24){
    zaehler_hour = 0;
    zaehler_day = zaehler_day + 1;
  }
  //Serial.println(zaehler_sek);
}

